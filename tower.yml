---

- hosts: tower
  become: true

  vars:
    tower_username: admin
    tower_password: password

  tasks:

    - name: Hello
      debug:
        msg: hello

    - name: Get the organization id
      uri:
        url: "https://192.168.1.100/api/v2/organizations/"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: get_org

    - name: Show the get_org variable
      debug:
        var: get_org.json.results.0.id

    - name: Set the organization id
      set_fact:
        org_id: "{{ get_org.json.results.0.id|int }}"

    - name: Show the org_id
      debug:
        var: org_id

    - name: See if host1_pri_key exists
      uri:
        url: "https://192.168.1.100/api/v2/credentials/?name=host1_pri_key"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: get_host1_pri_key

    - name: Show get_host1_pri_key.json.count
      debug:
        var: get_host1_pri_key.json.count

    - name: Add host1_pri_key
      uri:
        url: "https://192.168.1.100/api/v2/credentials/"
        method: POST
        body:
          name: "host1_pri_key"
          description: "host1 private key"
          organization: "{{ org_id }}"
          credential_type: 1
          ssh_key_data: "{{ lookup('file', '.vagrant/machines/host1/vmware_fusion/private_key') }}"
          inputs:
            username: "vagrant"
            become_method: "sudo"
        body_format: json
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
        status_code: 201
      when: get_host1_pri_key.json.count == 0

# Note: Can only have one org using the 10 user demo license (so this won't work) :-(
#    - name: Create tower organization
#      tower_organization:
#        name: "Foo"
#        tower_username: "{{ tower_username }}"
#        tower_password: "{{ tower_password }}"
#        description: "Foo bar organization"
#        state: present
#
    - name: Create the Red Team
      tower_team:
        name: Red Team
        description: Red Team Description
        organization: Default
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        state: present
      register: team
      tags: team

    - name: Show the team.id
      debug:
        var: team.id
      tags: team

    - name: Create the Red playbook directory
      file:
        path: /var/lib/awx/projects/red
        state: directory

    - name: Copy the hello.yml playbook
      copy:
        src: hello.yml
        dest: /var/lib/awx/projects/red/hello.yml

# TODO Why is this not idempotent?
# TODO Why does this fail on second runs? Temp adding ignore_errors so it continues
#    - name: Create the Red project
#      tower_project:
#        name: red
#        local_path: red
#        description: Red project
#        organization: Default
#        scm_type: manual
#        tower_username: "{{ tower_username }}"
#        tower_password: "{{ tower_password }}"
#        state: present
#      ignore_errors: true

    - name: See if red project exists
      uri:
        url: "https://192.168.1.100/api/v2/projects/?name=red"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: get_red_project

    - name: Show get_red_project.json.count
      debug:
        var: get_red_project.json.count

    - name: Add red project
      uri:
        url: "https://192.168.1.100/api/v2/projects/"
        method: POST
        body:
          name: "red"
          description: "red project"
          local_path: "red"
          organization: "{{ org_id }}"
          scm_type: ""
        body_format: json
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
        status_code: 201
      when: get_red_project.json.count == 0

# TODO Why is this not idempotent?
# TODO How do you add a user to a project? (using ansible module)
#    - name: Create the Red Team Captain
#      tower_user:
#        username: captainred
#        password: password
#        email: captainred@example.org
#        first_name: Captain
#        last_name: Red
#        tower_username: "{{ tower_username }}"
#        tower_password: "{{ tower_password }}"
#        state: present

    - name: See if Red Captain exists
      uri:
        url: "https://192.168.1.100/api/v2/users/?username=captainred"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: get_red_captain
      tags:
        - user
        - team

    - name: Show get_red_captain.json.count
      debug:
        var: get_red_captain.json.count
      tags: user

#    - name: Show get_red_captain
#      debug:
#        var: get_red_captain
#      tags: user

    - name: Set the captain id
      set_fact:
        captain_id: "{{ get_red_captain.json.results.0.id | int }}"
      tags:
        - user
        - team

    - name: Show get_red_captain id (both values)
      debug:
        var: get_red_captain.json.results.0.id, captain_id
      tags:
        - user
        - team

    - name: Add Red Captain
      uri:
        url: "https://192.168.1.100/api/v2/users/"
        method: POST
        body:
          username: "red"
          first_name: "Captain"
          last_name: "Red"
          email: "captainred@example.org"
          password: password
        body_format: json
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
        status_code: 201
      when: get_red_captain.json.count == 0
      tags: user

    - name: See if Red Captain is in org
      uri:
        url: "https://192.168.1.100/api/v2/organizations/1/users/?id={{ get_red_captain.json.results.0.id }}"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: get_red_captain_org
      tags: user

    - name: Show get_red_captain_org.json.count
      debug:
        var: get_red_captain_org.json.count
      tags: user

    - name: Add Red Captain to Org
      uri:
        url: "https://192.168.1.100/api/v2/organizations/users/"
        method: POST
        body:
          id: get_red_captain.json.results.0.id
        body_format: json
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
        status_code: 201
      when: get_red_captain_org.json.count == 0
      tags: user

# TODO This should work, but complains about tower_username. Huh?
#    - name: Add Captain Red to Red Team
#      tower_role:
#        user: captainred
#        target_team: "Red Team"
#        role: member
#        tower_username: "{{ tower_username }}"
#        tower_password: "{{ tower_password }}"
#        state: present
#      tags: user

      # TODO not sure why this is not working... will hard code to 3 for now
#    - name: Get member role
#      uri:
#        url: "https://192.168.1.100/api/v2/roles/name=Member"
#        method: GET
#        user: "{{ tower_username }}"
#        password: "{{ tower_password }}"
#        force_basic_auth: yes
#        validate_certs: false
#      register: get_member
#      tags: role

#    - name: Show get_member
#      debug:
#        var: get_member
#      tags: role

    - name: See if Red Captain is member in org
      uri:
        url: "https://192.168.1.100/api/v2/roles/3/users/?id={{ get_red_captain.json.results.0.id }}"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: get_red_captain_org
      tags: user

    - name: Show get_red_captain_org.json.count
      debug:
        var: get_red_captain_org.json.count
      tags: user

    - name: Add Red Captain to org
      uri:
        url: "https://192.168.1.100/api/v2/roles/3/users/"
        method: POST
        body:
          id: get_red_captain.json.results.0.id
        body_format: json
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
        status_code: 201
      when: get_red_captain_org.json.count == 0
      tags: user

    - name: See if Captain Red is on Red Team
      uri:
        url: "https://192.168.1.100/api/v2/teams/{{ team.id }}/users/id={{ get_red_captain.json.results.0.id }}"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
        status_code: 200,404
      register: get_cap_on_team
      tags: team

    - name: Show get_cap_on_team.status
      debug:
        var: get_cap_on_team.status
      tags: team

    - name: Add Red Captain to Red Team
      uri:
        url: "https://192.168.1.100/api/v2/teams/{{ team.id }}/users/"
        method: POST
        # TODO id must be an integer
        #body:
        #id: "{{ captain_id|int }}"
        #body_format: json
        # works body: '{ "id":2 }'
        body: "{ \"id\":{{ captain_id }} }"
        body_format: json
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: false
        status_code: 201,204
      when: get_cap_on_team.status == 404
      tags: team

    - name: Add Red Inventory
      tower_inventory:
        name: Red Inventory
        description: Red Inventory
        organization: Default
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        state: present

# TODO improve this
    - name: Copy the host1 pri key to tower
      copy:
        src: .vagrant/machines/host1/vmware_fusion/private_key
        dest: /opt/host1prikey
        owner: root
        group: root
        mode: 0666

    - name: Copy the host2 pri key to tower
      copy:
        src: .vagrant/machines/host2/vmware_fusion/private_key
        dest: /opt/host2prikey
        owner: root
        group: root
        mode: 0666

    - name: Add host1 to Tower
      tower_host:
        name: host1
        description: Red Host Group
        inventory: Red Inventory
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        state: present
        variables:
          ansible_ssh_host: 192.168.1.101
          ansible_ssh_private_key_file: /opt/host1prikey

    - name: Add host2 to Tower
      tower_host:
        name: host2
        description: Red Host Group
        inventory: Red Inventory
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        state: present
        variables:
          ansible_ssh_host: 192.168.1.102
          ansible_ssh_private_key_file: /opt/host2prikey

# TODO fails with credential-type is required
#  Note: That is why creating the host1_pri_key above via REST api.
#    - name: Add host1 credential
#      tower_credential:
#        name: host1_pri_key
#        kind: ssh
#        description: host1 private key
#        become_username: vagrant
#        ssh_key_data: /opt/host1prikey
#        organization: Default
#        tower_username: "{{ tower_username }}"
#        tower_password: "{{ tower_password }}"
#        state: present
#
#    - name: Add host2 credential
#      tower_credential:
#        name: host2_pri_key
#        kind: ssh
#        description: host2 private key
#        become_username: vagrant
#        ssh_key_data: /opt/host2prikey
#        organization: Default
#        tower_username: "{{ tower_username }}"
#        tower_password: "{{ tower_password }}"
#        #tower_verify_ssl: False
#        state: present


# TODO Not sure why idempotent
# Credential Type: Machine, Organization: Default, Username: vagrant, SSH Private Key: <contents of pri key for host1>
# Name: host1prikey, Privilege escalation: sudo
    - name: Create hello job template
      tower_job_template:
        name: hello
        job_type: run
        inventory: Red Inventory
        project: red
        playbook: hello.yml
        machine_credential: "host1_pri_key"
        tower_username: "{{ tower_username }}"
        tower_password: "{{ tower_password }}"
        state: present
